{#
 # @prop {string} [aspectRatio] - ex., "1.75"
 # @prop {string} [caption]
 # @prop {boolean} [fade]
 # @prop {Object[]} frames - Array of frame definitions
 # @prop {string} id
 # @prop {Object[]} images - Array of image paths
 # @prop {boolean} [pointer]
 # @prop {boolean} [printedEffect]
 # @callable false
 #}
{% macro render( props ) %}
<figure
	x-data="PhoneApp({
		id: '{{ props.id }}',
		frames: {{ props.frames | dump | safe | replace( '"', "'" ) }},
		images: {{ (props.images if props.images else []) | dump | safe | replace( '"', "'" ) }},
		pointer: {{ props.pointer === true }},
		debug: {{ props.debug === true }},
	})"
	x-init="$watch( 'frameIndex', () => framestart( 'x-init=$watch' ) )"
	x-bind:data-status="status"

	id="{{ props.id }}"
	class="[ center stack-sm ][ --measure ][ Phone {{ 'Phone--static' if props.frames.length === 1 }} {{ 'Phone--printed' if props.printedEffect else '' }} ]"
	style="--aspect-ratio: {{ props.aspectRatio if props.aspectRatio else '1.0' }};"
	aria-label="{{ props.caption | striptags }}"
>
	<div
		class="[ center ][][ Phone-body {{ 'Phone-body--faded' if props.fade else '' }} ]"
	>
		<div
			x-bind:style="screens.style"
			class="[][ absolute ][ Phone-screen-mask ]"
			style="--screen-top-opacity: 0;"
		>
			<picture
				x-on:transitionend="frametransitionend"
				data-transition-source="screen"

				aria-hidden="true"
				class="[][][ Phone-screen Phone-screen-bottom ]"
			>
				<source
					x-bind:srcset="screens.bottom.background ? '/images/' + screens.bottom.background + '.avif' : ''"
					type="image/avif"
				/>
				<source
					x-bind:srcset="screens.bottom.background ? '/images/' + screens.bottom.background + '.webp' : ''"
					type="image/webp"
				/>
				<source
					x-bind:srcset="screens.bottom.background ? '/images/' + screens.bottom.background + '.jpg' : ''"
					type="image/jpg"
				/>
				<img
					x-bind:src="screens.bottom.background ? '/images/' + screens.bottom.background + '.jpg' : ''"
					x-on:load="frameimageload"

					alt="{{ props.caption }}"
				/>
			</picture>

			<picture
				x-on:transitionend="frametransitionend"
				data-transition-source="screen"

				aria-hidden="true"
				class="[][][ Phone-screen Phone-screen-top ]"
			>
				<source
					x-bind:srcset="screens.top.background ? '/images/' + screens.top.background + '.avif' : ''"
					type="image/avif"
				/>
				<source
					x-bind:srcset="screens.top.background ? '/images/' + screens.top.background + '.webp' : ''"
					type="image/webp"
				/>
				<source
					x-bind:srcset="screens.top.background ? '/images/' + screens.top.background + '.jpg' : ''"
					type="image/jpg"
				/>
				<img
					x-bind:src="screens.top.background ? '/images/' + screens.top.background + '.jpg' : ''"
					x-on:load="frameimageload"

					alt="{{ props.caption }}"
				/>
			</picture>
		</div>

		{% if props.pointer %}
		{% set initialPosition = props.frames[0].screens.pointer %}
		<div
			x-bind:style="pointer.style"
			x-on:transitionend="frametransitionend"
			data-transition-source="pointer"

			class="[][][ Phone-pointer ]"
			style="--screen-pointer-x: {{ initialPosition.x }}; --screen-pointer-y: {{ initialPosition.y }};"
		></div>
		{% endif %}

		<button
			@click="play"

			x-show="frames.length > 1"
			x-transition.duration.375ms

			class="[][][ Phone-play-button ]"
		><span class="[][ visually-hidden ][]">Play</span></button>
	</div>

	{% if props.caption %}
	<figcaption
		class="[ center ][ measure text-center {{ 'visually-hidden' if props.hideCaption else '' }} ][]"
		id="{{ props.id }}-caption"
	>{{ props.caption | safe }}</figcaption>
	{% endif %}
</figure>
{% endmacro %}

{% set criticalStyles %}
<style>
	.Phone {
		max-width: calc( var( --measure-size) - 5em );
		width: 100%;
	}

	.Phone--printed {
		mix-blend-mode: multiply;
	}

	.Phone-body {
		--width: 100%;

		position: relative;
		overflow-y: hidden;

		height: 0;
		width: var( --width );
		padding-top: calc( var( --aspect-ratio ) * var( --width ) );
	}
		@media (min-width: 800px) {
			.Phone-body {
				--width: 90%;
			}
		}

		/* Device body */
		.Phone-body::after {
			z-index: 2;

			content: "";
			display: block;
			position: absolute;
			top: 0; right: 0; bottom: 0; left: 0;

			filter: grayscale( 0.25 );

			background-position: top center;
			background-size: 100%;
			background-image:
				url( /images/iphone-frame-outside.svg ),
				url( /images/iphone-frame-inside.svg )
			;
			background-repeat: no-repeat;
		}

		.Phone--printed .Phone-body::after {
			filter: grayscale( 1 );
		}

		/* Fade effect */
		.Phone-body--faded::before {
			--height: 100px;

			z-index: 10;
			content: "";
			display: block;
			position: absolute;
			right: 0; bottom: 0; left: 0;
			height: var( --height );

			background-color: white;

			-webkit-mask-image: url( /images/iphone-mask-gradient.png );
			-webkit-mask-image: image-set(
				"/images/iphone-mask-gradient.avif" type("image/avif"),
				"/images/iphone-mask-gradient.webp" type("image/webp")
			);
			-webkit-mask-size: 100% var( --height );
			-webkit-mask-repeat: no-repeat;
			mask-image: url( /images/iphone-mask-gradient.png );
			mask-image: image-set(
				"/images/iphone-mask-gradient.avif" type("image/avif"),
				"/images/iphone-mask-gradient.webp" type("image/webp")
			);
			mask-size: 100% var( --height );
			mask-repeat: no-repeat;
		}

	/* Pointer */
	.Phone-pointer {
		--screen-pointer-x-min: 0.055;
		--screen-pointer-y-min: 0.0275;
		--screen-pointer-opacity: 0;

		--size: 15; /* A percentage of the device width */
		--size-coefficient: calc( 100 / var( --size ) );

		z-index: 1;

		position: absolute;
		top: 0; left: 0;

		transform: translate(
				calc(
					(100% * var( --size-coefficient )) * var( --screen-pointer-x-min ) +
					(100% * var( --size-coefficient )) * var( --screen-pointer-x, 0.0 )
				),
				calc(
					(100% * var( --size-coefficient )) * var( --screen-pointer-y-min ) * var( --aspect-ratio ) +
					(100% * var( --size-coefficient )) * var( --screen-pointer-y, 0.0 ) * var( --aspect-ratio )
				)
			)
		;

		height: 0;
		width: 0;
		padding-right: calc( var( --size ) * 1% );
		padding-bottom: calc( var( --size ) * 1% );

		transition-property: transform;
		transition-timing-function: ease;

		/*
		 * Delay with no transition to keep timing correct for animations, but
		 * but default to no actual animation
		 */
		transition-duration: 0s;
		transition-delay: 1s;
	}
		.Phone-pointer::after {
			/*
			 * Animating the scale of the "child" element instead of its parent
			 * prevents the %-based x/y translation from causing the pointer
			 * to jump all over the place.
			 */
			content: "";
			display: block;
			position: absolute;
			top: 0; right: 0; bottom: 0; left: 0;

			border-radius: 50%;
			background-color: var( --color-teal );

			transform: scale( var( --screen-pointer-scale, 1 ) );
			opacity: var( --screen-pointer-opacity, 0.5 );

			transition: transform 0.50s ease, opacity 0.20s ease;
		}

		.Phone[data-status="playing"] .Phone-pointer {
			--screen-pointer-opacity: 0.5;
		}

	/* Both Screens */
	.Phone-screen {
		--grayscale: 1;

		display: block;
		position: absolute;
		top: 0; right: 0; bottom: 0; left: 0;

		filter: grayscale( var( --grayscale ) );

		transition-property: opacity, filter;
		transition-timing-function: ease;

		/*
		 * Delay with no transition to keep timing correct for animations, but
		 * but default to no animation
		 */
		transition-duration: 0s;
		transition-delay: 0.75s, 2s, 1s;
	}
		/* Switch to muted color during playback or on hover */
		[data-status="playing"] .Phone-screen,
		.Phone--static:hover .Phone-screen {
			--grayscale: 0.3;
		}

	.Phone-screen-top {
		opacity: var( --screen-top-opacity );
		transform: translateX( var( --screen-top-translateX, 0 ) );
	}
	.Phone-screen-bottom {
		opacity: var( --screen-bottom-opacity );
		transform: translateX( var( --screen-bottom-translateX, 0 ) );
	}

	.Phone-screen-mask {
		background-color: var( --color-black );
		-webkit-mask-image: url( /images/screen-mask.png );
		-webkit-mask-image: image-set(
			"/images/screen-mask.avif" type("image/avif"),
			"/images/screen-mask.webp" type("image/webp")
		);
		-webkit-mask-size: 100%;
		-webkit-mask-repeat: no-repeat;
		mask-image: url( /images/screen-mask.png );
		mask-image: image-set(
			"/images/screen-mask.avif" type("image/avif"),
			"/images/screen-mask.webp" type("image/webp")
		);
		mask-size: 100%;
		mask-repeat: no-repeat;
	}

	/* Play button */
	.Phone-play-button {
		--inset-x: var( --size-0 );
		--inset-y: var( --size--1 );
		background: transparent;
		border-radius: var( --size-2 );
		border: none;
		bottom: var( --inset-y );
		cursor: pointer;
		left: var( --inset-x );
		position: absolute;
		top: var( --inset-y );
		width: calc( 100% - 2 * var( --inset-x ) );
		z-index: 11;

		transition: opacity 0.25s ease;
	}
		.Phone-play-button::after {
			--shadow-color: rgba( 0, 0, 0, 0.1 );
			--size: var( --size-3 );

			background-color: var( --color-teal );
			background-image: url(/images/icon-play.svg);
			background-position: 53% center;
			background-repeat: no-repeat;
			background-size: 33%;
			border-radius: var( --size--1 );
			box-shadow:
				0 1px 1px var( --shadow-color ),
				0 2px 2px var( --shadow-color ),
				0 4px 4px var( --shadow-color ),
				0 8px 8px var( --shadow-color ),
				0 12px 12px var( --shadow-color ),
				0 24px 24px var( --shadow-color )
			;
			content: "";
			display: block;
			height: var( --size );
			left: calc( 50% - var( --size) / 2 );
			position: absolute;
			top: calc( 50% - var( --size) / 2 );
			width: var( --size );
		}

		[data-status="playing"] .Phone-play-button {
			opacity: 0;
		}

	.Phone figcaption {
		--measure-size: 40ch;
		font-size: calc( var( --font-size ) );
	}

	@media (prefers-reduced-motion: no-preference) {
		/*
		 * Switch to duration with no delay to add animation for users who don't
		 * have reduced motion enabled
		 */
		.Phone-pointer {
			transition-duration: 1s;
			transition-delay: 0s;
		}
		.Phone-screen {
			transition-duration: 0.75s, 1.345s;
			transition-delay: 0s;
		}
	}
</style>
{% endset %}

{% set asyncScripts = [
	{
		src: "/scripts/alpinejs@3.4.1.js",
		defer: true
	}
]%}

{% set criticalScript %}
<script>
	let PhoneApp = ({id, frames=[], images=[], pointer} = {}) =>
	{
		let imageStage = new Image();
		let timeouts = [];
		let transitions = {};

		return {
			get currentFrame()
			{
				return this.frames[this.frameIndex];
			},

			get imageExtension()
			{
				let img = document.querySelector( `#${id} img` );
				if( img.currentSrc )
				{
					let pathnameSegments = (new URL( img.currentSrc )).pathname.split( "/" );
					let filename = pathnameSegments[pathnameSegments.length - 1];
					let filenameSegments = filename.split( "." );
					let extname = filenameSegments[filenameSegments.length - 1];

					return extname;
				}
			},

			autoplay: false,
			frameIndex: 0,
			frames: frames,
			pointer: pointer,
			status: "stopped",
			ignoreTransitions: true,

			screens: {
				top: {},
				bottom: {},

				get style()
				{
					let styles = [
						`--screen-top-opacity: ${this.top.opacity || 0}`,
						`--screen-bottom-opacity: ${this.bottom.opacity || 0}`,
					];

					return styles.join( "; " );
				},
			},

			pointer: {
				x: 0.0,
				y: 0.0,
				tapDown: false,

				get style()
				{
					let styles = [
						`--screen-pointer-x: ${this.x}`,
						`--screen-pointer-y: ${this.y}`,
					];

					if( this.tapDown )
					{
						styles.push( `--screen-pointer-scale: 0.825` );
						styles.push( `--screen-pointer-opacity: 0.625` );
					}

					return styles.join( "; " );
				}
			},

			init()
			{
				// First frame setup
				this.framestart( "init" );
			},

			framestart( caller )
			{
				window.addEventListener( "blur", () => this.pause(), true );

				this.screens.top = Object.assign(
					this.screens.top,
					this.currentFrame.screens.top || {}
				);
				this.screens.bottom = Object.assign(
					this.screens.bottom,
					this.currentFrame.screens.bottom || {}
				);
				this.pointer = Object.assign(
					this.pointer,
					this.currentFrame.screens.pointer || {}
				);

				// If a frame does not have a duration defined, it is assumed it
				// will cause a CSS transition which will in turn call framerun()
				if( this.currentFrame.duration !== undefined )
				{
					this.framerun();
				}
			},

			framerun()
			{
				if( this.currentFrame.duration )
				{
					let frameIndex = this.frameIndex;
					let frameDuration = this.currentFrame.duration;

					let timeout = setTimeout( () =>
					{
						this.frameend();

					}, this.currentFrame.duration );

					timeouts.push( timeout );
				}
				else
				{
					this.frameend();
				}

				this.loadNextImage();
			},

			frameimageload( event )
			{
				if( this.currentFrame.duration )
				{
					// Prefer duration over image load
					return;
				}

				this.framerun();
			},

			frametransitionend( event )
			{
				if( this.ignoreTransitions )
				{
					// Don't handle transitions outside of playback
					return;
				}

				if( this.currentFrame.duration )
				{
					// Prefer duration over transitions the frame might trigger
					return;
				}

				if( transitions[this.frameIndex] !== undefined )
				{
					// Don't sweat multiple transitions on the same frame.
					//
					// This is a little awkward since there might be additional
					// transitions later, but it's close enough and better than
					// trying to juggle an unknown number of transitions
					return;
				}

				if( this.currentFrame.transitionOn )
				{
					if( this.currentFrame.transitionOn !== event.target.dataset.transitionSource )
					{
						// If we're waiting for a specific element to transition
						// and this isn't it, hang tight...
						return;
					}
				}

				transitions[this.frameIndex] = true;

				if( event.target.attributes.getNamedItem("x-on:transitionend") )
				{
					this.framerun();
				}
			},

			frameend()
			{
				if( this.autoplay )
				{
					if( this.frameIndex >= this.frames.length - 1 )
					{
						this.stop();
					}
					else
					{
						this.frameIndex++;
					}
				}

				window.removeEventListener( "blur", () => this.pause(), true );
			},

			loadNextImage()
			{
				let nextImage = images.find( image =>
				{
					return image.index > this.frameIndex
				});

				if( nextImage && !nextImage.loaded )
				{
					let imagePath = `/images/${nextImage.path}.${this.imageExtension}`;
					imageStage.src = imagePath;
					nextImage.loaded = true;
				}
			},

			pause()
			{
				if( this.status === "playing" )
				{
					this.autoplay = false;
					this.status = "paused";
				}
			},

			play()
			{
				if( this.status === "playing" )
				{
					return this.pause();
				}

				let timeout = this.status === "paused" ? 500 : 0;

				this.ignoreTransitions = false;
				this.status = "playing";
				this.autoplay = true;

				setTimeout( () =>
				{
					if( this.frameIndex >= this.frames.length - 1 )
					{
						this.frameIndex = 0;
					}
					else
					{
						this.frameIndex++;
					}

				}, timeout );

				// Don't call framestart() directly, it will be handled by
				// x-init="$watch(...)" automatically
			},

			stop()
			{
				this.status = "stopped";
				this.autoplay = false;

				timeouts.forEach( timeout => clearTimeout( timeout ) );
				transitions = {};

				// Reset to first frame
				this.ignoreTransitions = true;
				this.frameIndex = 0;
			},
		}
	}
</script>
{% endset %}
